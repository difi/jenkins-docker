#!/usr/bin/env bash

checkLabel() {
    local label=$1
    local nodeId=$2
    value=$(docker node inspect ${nodeId} | jq ".[].Spec.Labels.\"${label}\"") || { echo "Failed to inspect node"; return 1; }
    [[ 'null' == ${value} ]] && {
        read -p "Node label '${label}' not set. Set it? [Y/n] " answer
        [[ -z ${answer} ]] && answer='y'
        [[ ${answer} =~ [yY] ]] && { docker node update ${nodeId} --label-add ${label}=true; } || { echo "Failed to create label"; return 1; }
    } || return 0
}

checkLabels() {
    nodeId=$(docker node inspect self | jq -r ".[].ID") || exit 1
    checkLabel jenkins-slave ${nodeId} || exit 1
    checkLabel jenkins-master ${nodeId} || exit 1
    checkLabel nexus ${nodeId} || exit 1
}

checkSwarmMode() {
    docker node ls 2>&1 >/dev/null || {
        read -p "Enable swarm mode in Docker? [Y/n] " answer
        [[ -z ${answer} ]] && answer='y'
        [[ ${answer} =~ [yY] ]] && { docker swarm init; } || { exit 1; }
    }
}

removeOldStack() {
    if [[ pipeline == $(docker stack ls --format {{.Name}}) ]]; then
        docker stack rm pipeline || exit 1
    fi
}

createSecrets() {
    utils/create-secrets || exit 1
}

removeAndCreateJobs() {
    [[ ! -z $(docker config ls -qf name=pipeline-jobs) ]] && {
        echo "Removing existing config pipeline-jobs"
        docker config rm pipeline-jobs || exit 1
    }
    echo "Creating config pipeline-jobs"
    utils/create-jobs-config || exit 1
}

removeAndCreateConfig() {
    [[ ! -z $(docker config ls -qf name=pipeline-config) ]] && {
        echo "Removing existing config pipeline-config"
        docker config rm pipeline-config || exit 1
    }
    echo "Creating config pipeline-config"
    utils/create-config || exit 1
}

waitForOldStackToBeRemoved() {
    while [[ ! -z $(docker network ls -qf name=pipeline_pipeline) ]]; do
        docker network rm pipeline_pipeline
        echo "Waiting for stack to be removed..."
        sleep 1
    done
}

removeVolume() {
    local volume=$1
    while [[ ! -z $(docker volume ls -qf name=${volume}) ]]; do
        echo "Removing volume ${volume}"
        docker volume rm ${volume}
        sleep 1
    done
}

taskState() {
    docker inspect $(docker service ps -q pipeline_verification) --format "{{json .Status.State}}" || return 1
}

checkSwarmMode
checkLabels
removeOldStack
createSecrets
removeAndCreateJobs
removeAndCreateConfig
waitForOldStackToBeRemoved
removeVolume jenkins-builds
removeVolume jenkins-data
removeVolume jenkins-ssh-settings
removeVolume jenkins-workspaces
removeVolume polling-job-repository
removeVolume nexus-data-new

mvn package -DskipTests || exit 1
docker/build-images local || exit 1
stackFile=docker/stack.yml
localStackFile=docker/stack-local.yml
REGISTRY=local VERSION=latest docker stack deploy --prune --resolve-image never -c ${stackFile} pipeline || exit 1
REGISTRY=local VERSION=latest docker stack deploy --resolve-image never -c ${localStackFile} pipeline || exit 1
taskState || exit 1
